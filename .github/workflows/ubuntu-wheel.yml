name: Ubuntu Wheel
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: 'Set to OFF for Release wheels'
        required: false
        default: 'ON'
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GCE_CLI_GHA_VERSION: '416.0.0'      # Fixed to avoid dependency on API changes
  BUILD_CUDA_MODULE: 'ON'
  BUILD_PYTORCH_OPS: 'ON'
  BUILD_TENSORFLOW_OPS: 'OFF'   # Turn ON when cxx11_abi is same for TF and PyTorch

jobs:
  build-wheel:
    name: Build wheel
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
    env:
      DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      CCACHE_TAR_NAME: open3d-ubuntu-1804-cuda-ci-ccache
      OPEN3D_CPU_RENDERING: true
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Checkout source code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
      - name: Maximize build space
        run: |
          source util/ci_utils.sh
          maximize_ubuntu_github_actions_build_space
      # Be verbose and explicit here such that a developer can directly copy the
      # `docker/docker_build.sh xxx` command to execute locally.
      - name: Docker build
        run: |
          if [ "${{ env.PYTHON_VERSION }}" = "3.8" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py38_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.9" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py39_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.10" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py310_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.11" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py311_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.8" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py38
          elif [ "${{ env.PYTHON_VERSION }}" = "3.9" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py39
          elif [ "${{ env.PYTHON_VERSION }}" = "3.10" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py310
          elif [ "${{ env.PYTHON_VERSION }}" = "3.11" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py311
          fi
          PIP_PKG_NAME="$(basename ${GITHUB_WORKSPACE}/open3d-[0-9]*.whl)"
          PIP_CPU_PKG_NAME="$(basename ${GITHUB_WORKSPACE}/open3d_cpu*.whl)"
          echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV
          echo "PIP_CPU_PKG_NAME=$PIP_CPU_PKG_NAME" >> $GITHUB_ENV
      - name: Upload wheel to GitHub artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: |
            ${{ env.PIP_PKG_NAME }}
            ${{ env.PIP_CPU_PKG_NAME }}
          if-no-files-found: error
      - name: GCloud CLI auth
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: 'google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa # v2.1.3'
        with:
          project_id: ${{ secrets.GCE_PROJECT }}
          credentials_json: '${{ secrets.GCE_SA_KEY_GPU_CI }}'
      - name: GCloud CLI setup
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: google-github-actions/setup-gcloud@98ddc00a17442e89a24bbf282954a3b65ce6d200 # v2.1.0
        with:
          version: ${{ env.GCE_CLI_GHA_VERSION }}
          project_id: ${{ secrets.GCE_PROJECT }}
      - name: Upload ccache to GCS
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          gsutil cp ${GITHUB_WORKSPACE}/${{ env.CCACHE_TAR_NAME }}.tar.gz gs://open3d-ci-cache/
      - name: Update devel release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload main-devel ${GITHUB_WORKSPACE}/${{ env.PIP_PKG_NAME }} \
          ${GITHUB_WORKSPACE}/${{ env.PIP_CPU_PKG_NAME }} --clobber
          gh release view main-devel

  test-wheel-cpu:
    name: Test wheel CPU
    runs-on: ubuntu-20.04
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
    env:
      OPEN3D_ML_ROOT: ${{ github.workspace }}/Open3D-ML
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Checkout source code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
      - name: Maximize build space
        run: |
          source util/ci_utils.sh
          maximize_ubuntu_github_actions_build_space
      - name: Checkout Open3D-ML source code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          repository: isl-org/Open3D-ML
          path: ${{ env.OPEN3D_ML_ROOT }}
      - name: Download wheels
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          pattern: open3d*-manylinux*.whl
          merge-multiple: true
      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: ${{ matrix.python_version }}
      - name: Test Python package
        run: |
          python -V
          source util/ci_utils.sh
          pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          test_wheel open3d-[0-9]*-"$pi_tag"-*.whl
      - name: Run Python unit tests
        run: |
          source util/ci_utils.sh
          echo "Running Open3D python tests..."
          run_python_tests
      - name: Test Python package (CPU)
        env:
          BUILD_CUDA_MODULE: OFF
        run: |
          python -V
          source util/ci_utils.sh
          pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          test_wheel open3d_cpu*-"$pi_tag"-*.whl
      - name: Run Python unit tests (CPU)
        run: |
          source util/ci_utils.sh
          echo "Running Open3D python tests (CPU wheel)..."
          run_python_tests
